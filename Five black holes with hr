from qiskit import QuantumCircuit, Aer, transpile, assemble, execute
from qiskit.visualization import plot_histogram
import numpy as np
import matplotlib.pyplot as plt

def black_hole_interaction(circuit, qubits):
    circuit.cx(qubits[0], qubits[1])
    circuit.h(qubits[1])
    return circuit

def hawking_radiation(circuit, qubit):
    theta = np.random.uniform(0, 2*np.pi)
    circuit.rx(theta, qubit)
    return circuit

# Construct the quantum circuit
def five_black_holes_circuit():
    circuit = QuantumCircuit(11, 2)
    circuit.h(0)  # Initialize information

    # Interactions with 5 black holes
    for i in range(5):
        circuit = black_hole_interaction(circuit, [i, i+1])
        circuit = hawking_radiation(circuit, i+1)

    # Simplified information retrieval
    for i in reversed(range(5)):
        circuit.cx(i, i+1)
        circuit.h(i)
    
    circuit.measure([0, 1], [0, 1])
    return circuit

# Construct and run the circuit
circuit = five_black_holes_circuit()
simulator = Aer.get_backend('aer_simulator')
compiled_circuit = transpile(circuit, simulator)
qobj = assemble(compiled_circuit)
result = simulator.run(qobj).result()

# Print the measurement outcomes
counts = result.get_counts()
print(counts)

# Plot the histogram
plot = plot_histogram(counts)
plot.savefig("histogram.png")  # Save the plot as an image file
plt.show()  # Display the plot
