from qiskit import QuantumCircuit, execute, Aer
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt

# Create a Quantum Circuit acting on a quantum register of one qubit
circ = QuantumCircuit(1, 1)

# Add a H gate on qubit 0, putting this qubit in superposition.
circ.h(0)

# Add another H gate on qubit 0. Because the qubit is already in superposition, 
# this will cause it to interfere with itself and return to its initial state.
circ.h(0)

# Map the quantum measurement to the classical bits
circ.measure([0], [0])

# Use Aer's qasm_simulator
simulator = Aer.get_backend('qasm_simulator')

# Execute the circuit on the qasm simulator
job = execute(circ, simulator, shots=1000)

# Grab the results from the job
result = job.result()

# Get the counts (how many times each possible outcome was obtained)
counts = result.get_counts(circ)

# Plot a histogram of the results
fig = plot_histogram(counts)

# Save the plot as a PNG
fig.savefig('quantum_interference.png', dpi=300)

# If you still want to try and display the plot in your current environment, you can use plt.show()
plt.show()
