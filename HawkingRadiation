from qiskit import QuantumCircuit, Aer, transpile, assemble, execute
from qiskit.visualization import plot_histogram
import numpy as np
import matplotlib.pyplot as plt

# Initialize information as a superposition
def initialize_information(circuit):
    circuit.h(0)
    return circuit

# Simulate falling into the black hole by entangling information
def fall_into_black_hole(circuit):
    circuit.cx(0, 1)
    circuit.h(1)
    return circuit

# Model Hawking radiation as a random transformation
def hawking_radiation(circuit):
    theta = np.random.uniform(0, 2*np.pi)
    circuit.rx(theta, 1)
    return circuit

# Attempt to retrieve information
def information_retrieval(circuit):
    circuit.cx(0, 1)
    circuit.h(0)
    return circuit

# Construct the quantum circuit
def black_hole_circuit():
    circuit = QuantumCircuit(2, 2)
    circuit = initialize_information(circuit)
    circuit = fall_into_black_hole(circuit)
    circuit = hawking_radiation(circuit)
    circuit = information_retrieval(circuit)
    circuit.measure([0, 1], [0, 1])
    return circuit

# Construct and run the circuit
circuit = black_hole_circuit()
simulator = Aer.get_backend('aer_simulator')
compiled_circuit = transpile(circuit, simulator)
qobj = assemble(compiled_circuit)
result = simulator.run(qobj).result()

# Print the measurement outcomes
counts = result.get_counts()
print(counts)


# Plot the histogram
plot = plot_histogram(counts)
plot.savefig("two_black_holes_histogram.png")  # Save the plot as an image file
plt.show()  # Display the plot
